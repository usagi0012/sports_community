<html>
    <head>
        <link
            href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css"
            rel="stylesheet"
            id="bootstrap-css"
        />
        <link
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css"
            type="text/css"
            rel="stylesheet"
        />
        <link href="/style.css" type="text/css" rel="stylesheet" />
        <script
            src="https://cdn.socket.io/3.1.3/socket.io.min.js"
            integrity="sha384-cPwlPLvBTa3sKAgddT6krw0cJat7egBga3DJepJyrLl4Q9/5WLra3rrnMcyTyOnh"
            crossorigin="anonymous"
        ></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
        <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
    </head>

    <body>
        <div class="container">
            <h3 class="text-center">Messaging</h3>
            <div class="messaging">
                <div class="inbox_msg">
                    <div class="inbox_people">
                        <div class="headind_srch">
                            <div class="recent_heading">
                                <h4>Chat Room</h4>
                            </div>
                            <div class="chatroom_btn_place">
                                <button
                                    type="button"
                                    class="chatroom_btn setNickname"
                                >
                                    <i class="fa fa-cog" aria-hidden="true"></i>
                                </button>
                                <button
                                    type="button"
                                    class="chatroom_btn createChatRoom"
                                >
                                    <i
                                        class="fa fa-plus"
                                        aria-hidden="true"
                                    ></i>
                                </button>
                            </div>
                        </div>
                        <div class="inbox_chat chatRoomList"></div>
                    </div>
                    <div class="mesgs">
                        <div class="msg_history chat">fff</div>
                        <div class="type_msg">
                            <div class="input_msg_write">
                                <input
                                    type="text"
                                    class="write_msg"
                                    placeholder="Type a message"
                                />
                                <button type="button" id="invite-modal-btn">
                                    초대
                                </button>
                                <button type="button" id="expel-modal-btn">
                                    추방
                                </button>
                                <button
                                    class="msg_send_btn sendMessage"
                                    type="button"
                                >
                                    <i
                                        class="fa fa-paper-plane-o"
                                        aria-hidden="true"
                                    ></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <p class="text-center top_spac">
                    Design by
                    <a
                        target="_blank"
                        href="https://www.linkedin.com/in/sunil-rajput-nattho-singh/"
                        ><%= name %></a
                    >
                </p>
            </div>
        </div>
        <div id="invite-modal-overlay">
            <div id="modal">
                <label for="nickname">초대할 유저 닉네임: </label>
                <input
                    type="text"
                    id="nickname"
                    placeholder="닉네임을 입력하세요"
                />
                <br />
                <button id="submit-btn">제출</button>
                <button id="close-btn">닫기</button>
            </div>
        </div>
        <div id="expel-modal-overlay">
            <div id="modal">
                <label for="expel-nickname">추방할 유저 닉네임: </label>
                <input
                    type="text"
                    id="expel-nickname"
                    placeholder="닉네임을 입력하세요"
                />
                <br />
                <button id="expel-submit-btn">제출</button>
                <button id="expel-close-btn">닫기</button>
            </div>
        </div>
    </body>
    <!--
    <body>
        <div>
            <h3>채팅방 목록</h3><br/>
            <ul class="chatRoomList">
            </ul>
            <button class="createChatRoom">채팅방 만들기</button>
        </div>
        <div>
            <h3>"<span class="roomName"></span>" 채팅내용</h3><br/>
            <ul class="chat">
            </ul>
        </div>
        <input type="text" class="text"/>
        <button class="sendMessage">sned</button>
        <br/>
        <input type="text" class="nickname"/>
        <button class="setNickname">setNickname</button>
        <script>
        </script>
    </body>-->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        // 내가 채팅방의 생성자인 경우에만 멤버 초대하기 가능
        function showButton() {
            const roomId = localStorage.getItem("thisRoomId");
            // 스웨거에서 따온 엑세스 토큰, 나중에 바꿔주기
            const authorized = localStorage.getItem("authorized");
            const data = JSON.parse(authorized);
            const accessToken = data.accessToken.value;

            axios
                .get(`/api/chat-invitation/${roomId}`, {
                    headers: {
                        Authorization: `Bearer ${accessToken}`,
                    },
                })
                .then(function (response) {
                    console.log("****리스폰스****", response);
                    if (response.data.data) {
                        console.log("****");
                        console.log("response.data.data", response.data.data);
                        $("#invite-modal-btn").css("display", "flex");
                        $("#expel-modal-btn").css("display", "flex");
                    } else {
                        $("#invite-modal-btn").css("display", "none");
                        $("#expel-modal-btn").css("display", "none");
                    }
                })
                .catch(function (error) {
                    console.log(error);
                });
        }

        function getRoomMessage(roomId) {
            // 스웨거에서 따온 엑세스 토큰, 나중에 바꿔주기
            const authorized = localStorage.getItem("authorized");
            const data = JSON.parse(authorized);
            const accessToken = data.accessToken.value;

            axios
                .get(`/api/message/${roomId}`, {
                    headers: {
                        Authorization: `Bearer ${accessToken}`,
                    },
                })
                .then(function (response) {
                    console.log("여기서 확인해야함", response);
                    let html = "";
                    const myId = response.data.data.userId;
                    response.data.data.message.forEach((message) => {
                        console.log(message);
                        // 내 유저 Id가 message.userId와 같다면 오른쪽에 표시
                        // 다르다면 왼쪽에 표시
                        // 추후에 userId가 아니라 nickName으로 가져오기
                        if (myId === message.userId) {
                            console.log(message.content);
                            html += '<div class="outgoing_msg">';
                            html += '<div class="sent_msg">';
                            html += "<p>" + message.content + "</p>";
                            // html += timeDate;
                            html += `${message.userId} | `;
                            html += `${message.createdAt.slice(11, 16)} | `;
                            html += message.createdAt.slice(0, 10);
                            html += "</div>";
                            html += "</div>";
                        } else {
                            html += '<div class="incoming_msg">';
                            html += '<div class="received_msg">';
                            html += '<div class="received_withd_msg">';
                            html += "<p>" + message.content + "</p>";
                            // html += timeDate;
                            html += `${message.userId} | `;
                            html += `${message.createdAt.slice(11, 16)} | `;
                            html += message.createdAt.slice(0, 10);
                            html += "</div>";
                            html += "</div>";
                            html += "</div>";
                        }
                        $(".chat").append(html);
                        $(".chat").scrollTop($(".chat")[0].scrollHeight);
                    });
                })
                .catch(function (error) {
                    console.log(error);
                });
        }

        // 백엔드
        let myInfo = {
            nickname: null,
            id: null,
            room: {
                roomId: null,
                roomName: null,
            },
        };

        // 채팅방 연결
        function connectSocket() {
            const authorized = localStorage.getItem("authorized");
            const data = JSON.parse(authorized);
            const accessToken = data.accessToken.value;
            console.log("엑세스 토큰", accessToken);
            const socket = io("http://localhost:5000", {
                query: {
                    auth: accessToken,
                },
            });
            return socket;
        }

        function addSocketListener(socket) {
            socket.on("connect", function () {
                console.log("Connected");
                //연결 완료 후 로컬스토리지를 확인하여 닉네임 세팅
                const nickname = localStorage.getItem("nickname");
                // 연결시 기존에 저장되어 있던 룸 아이디 제거
                const deletedRoomId = localStorage.removeItem("thisRoomId");
                socket.emit("setInit", { nickname }, (response) => {
                    console.log("연결시 리스폰스", response);
                    myInfo.nickname = response.nickname;
                    myInfo.id = socket.id;
                    myInfo.room = response.room;
                    $(".nickname").val(myInfo.nickname);
                    $(".roomName").text(myInfo.room.roomName);
                });
                socket.emit("getChatRoomList", null);
                localStorage.setItem("socketId", socket.id);
            });

            // 받아온 메세지가 roomId가 클릭되어 있지 않은 상태에서는 채팅방에 나오지 않도록 구현해보자.
            // roomId의 클릭 상태는 localstorage에 넣어서 구현하면 될듯.
            // 따라서 다른 방 접근시에는 다른 방을 클릭할텐데 localstorage에 저장해놨던 room title을 클릭한 것으로 바꿔주면 될듯.
            // 추가적으로 다시 다른 방에 들어갔을 때는 db에 있는 데이터를 다시 넣어주고 그 뒤에 채팅 내역을 입력하는 식으로 하면 될듯.
            socket.on(
                "getMessage",
                function ({ id, nickname, message, roomId }) {
                    console.log(
                        "메세지 받아오는 부분",
                        id,
                        nickname,
                        message,
                        roomId,
                    );
                    console.log("서버 소켓 아이디", id);
                    console.log("클라아이디", socket.id);

                    const now = new Date();
                    const hours = now.getHours();
                    const minutes = now.getMinutes();
                    const month = now.toLocaleString("en-US", {
                        month: "long",
                    });
                    const day = now.getDate();

                    const formattedTime = `${hours % 12 || 12}:${
                        minutes < 10 ? "0" : ""
                    }${minutes} ${hours >= 12 ? "PM" : "AM"}`;

                    const timeDate = `
            <span class="time_date">
                ${nickname} | ${formattedTime} | ${month} ${day}
            </span>
        `;
                    const thisRoomId = localStorage.getItem("thisRoomId");
                    console.log({ thisRoomId });
                    console.log("*********", roomId);

                    console.log("소켓 아이디", socket.id);
                    console.log("마이 인포 아이디", myInfo.id);
                    console.log("디스 룸 아이디", thisRoomId);
                    console.log(roomId == thisRoomId);
                    let html = "";
                    // ****중요(여기까지 함)****
                    // 채팅 내역 잘 들어감 - 확인했음, 다시 켰을 때 안되면 말도 안되는거임
                    // roomId == thisRoomId && socket.id == client.id 넣으면 될 듯?
                    if (roomId == thisRoomId && socket.id == id) {
                        console.log("채팅 생성");
                        console.log($(".chat"));
                        html += '<div class="outgoing_msg">';
                        html += '<div class="sent_msg">';
                        html += "<p>" + message + "</p>";
                        html += timeDate;
                        html += "</div>";
                        html += "</div>";
                    } else if (roomId == thisRoomId && socket.id != id) {
                        html += '<div class="incoming_msg">';
                        html += '<div class="received_msg">';
                        html += '<div class="received_withd_msg">';
                        html += "<p>" + message + "</p>";
                        html += timeDate;
                        html += "</div>";
                        html += "</div>";
                        html += "</div>";
                    }
                    $(".chat").append(html);
                    $(".chat").scrollTop($(".chat")[0].scrollHeight);
                },
            );

            socket.on("getChatRoomList", function (response) {
                console.log("얍얍얍", response);
                let html = "";

                console.log({ myInfo });
                console.log("response", Object.values(response));
                const myRoomInfo = Object.values(response);

                // 2024-01-31 수정
                const roomId = localStorage.getItem("thisRoomId");

                response.title.forEach((v, index) => {
                    html +=
                        '<div class="chat_list ' +
                        (roomId === response.id[index]
                            ? "active_chat"
                            : "enterChatRoom") +
                        '" data-roomId="' +
                        response.id[index] +
                        '">';
                    html += '<div class="chat_people">';
                    html += `<div class="chat_ib">`;
                    html += "<h5>" + v + "</h5>";
                    html += "</div>";
                    html += "</div>";
                    html += "</div>";
                });

                $(".chatRoomList").html(html);
            });

            socket.on("disconnect", function () {
                $(".chatRoomList").html("");
                console.log("Disconnected");
            });
        }

        const socket = connectSocket();
        addSocketListener(socket);

        //채팅방 생성
        $(".createChatRoom").on("click", function () {
            const roomName = prompt("채팅방 이름을 입력해주세요.");
            if (!roomName) {
                return false;
            }
            $(".chat").html("");
            // 1. 채팅룸 만드는 API 호출 (response => roomId받기) - 보류
            // 2. roomId를 이용해서 socket에 접속

            // 콜백 함수 만들기 (enterChatRoom에 있는거도 쓰고 싶음) - 재사용
            // 바로 enterchatROom 해버리는거임. 만듬과 동시에 입장.
            socket.emit("createChatRoom", roomName, (res) => {
                console.log("야호야호야호", res);
                if (!res) return;
                myInfo.room = res;
                console.log("마이 인포룸", myInfo.room);
                $(".roomName").text(myInfo.room.roomName);
                $(".chat").html("");
            });

            socket.emit("getChatRoomList", null);
        });

        // 채팅방 입장
        $(document).on("click", ".enterChatRoom", function () {
            const thisRoomId = $(this).attr("data-roomId");
            const roomId = localStorage.getItem("thisRoomId");
            console.log("enter시 룸 아이디", roomId);
            socket.emit("enterChatRoom", roomId, (res) => {
                if (!res) return;
                myInfo.room = res;
                $(".roomName").text(myInfo.room.roomName);
                $(".chat").html("");
            });
            //null 필요 x (API로 대체)
            socket.emit("getChatRoomList", null);
            showButton();
            getRoomMessage(roomId);
        });

        // 채팅방 초대 모달
        $("#invite-modal-btn").on("click", function () {
            $("#invite-modal-overlay").css("display", "flex");
        });
        $("#expel-modal-btn").on("click", function () {
            $("#expel-modal-overlay").css("display", "flex");
        });

        // 모달 닫기 버튼들
        $("#close-btn").on("click", function () {
            $("#invite-modal-overlay").css("display", "none");
        });
        $("#expel-close-btn").on("click", function () {
            $("#expel-modal-overlay").css("display", "none");
        });

        // 모달 제출 버튼
        $("#submit-btn").on("click", function () {
            console.log("submit");

            const nickName = $("#nickname").val();
            const roomId = localStorage.getItem("thisRoomId");
            // 스웨거에서 따온 엑세스 토큰, 나중에 바꿔주기
            const authorized = localStorage.getItem("authorized");
            const data = JSON.parse(authorized);
            const accessToken = data.accessToken.value;

            axios
                .post(
                    `/api/chat-invitation/${roomId}`,
                    {
                        nickName,
                    },
                    {
                        headers: {
                            Authorization: `Bearer ${accessToken}`,
                        },
                    },
                )
                .then(function (response) {
                    console.log(response);
                    alert("멤버 초대에 성공했습니다.");
                })
                .catch(function (error) {
                    console.log(error);
                    alert("멤버 초대에 실패했습니다.");
                });
        });

        $("#expel-submit-btn").on("click", function () {
            console.log("expel-submit");

            const nickName = $("#expel-nickname").val();
            const roomId = localStorage.getItem("thisRoomId");
            // 스웨거에서 따온 엑세스 토큰, 나중에 바꿔주기
            const authorized = localStorage.getItem("authorized");
            const data = JSON.parse(authorized);
            const accessToken = data.accessToken.value;

            axios
                .delete(`/api/chat-invitation/${roomId}`, {
                    headers: {
                        Authorization: `Bearer ${accessToken}`,
                    },
                    data: {
                        nickName,
                    },
                })
                .then(function (response) {
                    console.log(response);
                    alert("멤버 추방이 완료되었습니다.");
                })
                .catch(function (error) {
                    console.log(error);
                    alert("멤버 추방에 실패했습니다.");
                });
        });

        // 메시지 전송
        $(".sendMessage").on("click", function () {
            // 룸 아이디와 같이 넘겨주려 했으나, 다음과 같은 오류 발생
            // Column count doesn't match value count at row 1
            // 룸 아이디를 못넘겨주면 어떻게 하지?
            // => messageData를 넘겨줘도 message만 넘어간다.
            const roomId = localStorage.getItem("thisRoomId");
            console.log("here");
            console.log("roomId", roomId);
            const messageData = {
                roomId: roomId,
                message: $(".write_msg").val(),
            };

            socket.emit("sendMessage", messageData);
            $(".write_msg").val("");
            console.log("보내짐?");
        });

        // 닉네임 설정
        $(".setNickname").on("click", function () {
            const nickname = prompt("변경할 닉네임을 입력해주세요.");
            if (!nickname) {
                return false;
            }
            socket.emit("setNickname", nickname);
            localStorage.setItem("nickname", nickname);
        });

        // 채팅방 클릭시 클릭되었다는 정보 local storage에 저장
        $(document).ready(function () {
            $(".inbox_chat").on("click", ".chat_list", function () {
                console.log("z");
                const thisRoomId = $(this).attr("data-roomId");
                console.log({ thisRoomId });
                localStorage.setItem("thisRoomId", thisRoomId);
            });
        });
    </script>
</html>
